# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2019-03-22 06:48
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('main', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClinicConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sms', models.BooleanField(default=True, verbose_name='SMS-уведомления')),
                ('phone', models.CharField(max_length=127, verbose_name='Телефон для отказов')),
                ('phone2', models.CharField(max_length=127, verbose_name='Телефон для информирования')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos', verbose_name='Логотип')),
                ('send_sms', models.BooleanField(default=True, verbose_name='Посылать СМС ?')),
                ('find_only_attached', models.BooleanField(default=True, verbose_name='Искать только прикрепленных пациентов')),
                ('clinic', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.Clinic', verbose_name='Мед. учреждение')),
            ],
            options={
                'verbose_name': 'Настройки мед. учреждения',
                'verbose_name_plural': 'Настройки мед. учреждений',
            },
        ),
        migrations.CreateModel(
            name='DepartmentConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_start_offset', models.PositiveIntegerField(default=1, verbose_name='Отступ начала записи')),
                ('today_time_interval', models.PositiveIntegerField(default=60, help_text='Минуты', verbose_name='Защитный интервал записи в текущий день')),
                ('day_range', models.PositiveIntegerField(default=0, verbose_name='Период записи')),
                ('phone', models.CharField(blank=True, max_length=31, null=True, verbose_name='Телефон для отказов')),
                ('phone2', models.CharField(blank=True, max_length=31, null=True, verbose_name='Телефон для информирования')),
                ('min_age', models.PositiveIntegerField(default=0, verbose_name='Минимальный возраст')),
                ('max_age', models.PositiveIntegerField(default=200, verbose_name='Максимальный возраст')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('department', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.Department', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'Настройки подразделения',
                'verbose_name_plural': 'Настройки подразделений',
            },
        ),
        migrations.CreateModel(
            name='SlotTypeConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_age', models.PositiveIntegerField(default=0, verbose_name='Минимальный возраст')),
                ('max_age', models.PositiveIntegerField(default=200, verbose_name='Максимальный возраст')),
                ('slot_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.SlotType', verbose_name='Тип слота')),
            ],
            options={
                'verbose_name': 'Настройки типа слота',
                'verbose_name_plural': 'Настройки типов слотов',
            },
        ),
        migrations.CreateModel(
            name='SpecialistConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='first_service_specialist', to='main.Service', verbose_name='Услуга для назначения')),
                ('service2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='second_service_specialist', to='main.Service', verbose_name='Услуга повторного приема')),
                ('specialist', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.Specialist', verbose_name='Specialist')),
            ],
            options={
                'verbose_name': 'Настройки для специалиста',
                'verbose_name_plural': 'Настройки для специалистов',
            },
        ),
        migrations.CreateModel(
            name='SpecializationConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enable', models.BooleanField(default=True, verbose_name='Вкл')),
                ('is_show_comment', models.BooleanField(default=False, verbose_name='Вывод комментария')),
                ('comment', models.CharField(blank=True, max_length=512, null=True, verbose_name='Комментарий')),
                ('department_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_writer.DepartmentConfig')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Service', verbose_name='Назначаемая услуга')),
                ('slot_types', models.ManyToManyField(to='main.SlotType', verbose_name='Разрешенные типы слотов')),
                ('specialization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Specialization', verbose_name='Специализация')),
            ],
            options={
                'verbose_name': 'Настройки для специализации',
                'verbose_name_plural': 'Настройки для специализаций',
            },
        ),
        migrations.AddField(
            model_name='departmentconfig',
            name='specializations',
            field=models.ManyToManyField(through='patient_writer.SpecializationConfig', to='main.Specialization'),
        ),
        migrations.AlterUniqueTogether(
            name='specializationconfig',
            unique_together=set([('specialization', 'department_config')]),
        ),
    ]
