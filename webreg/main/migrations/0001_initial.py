# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2019-03-22 06:48
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import main.models.user_profile
import main.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Системная дата создания')),
                ('modified_time', models.DateTimeField(auto_now=True, verbose_name='Системная дата изменения')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='Системная дата удаления')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('date', models.DateField(db_index=True, verbose_name='Дата приема')),
                ('additional_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Дополнительные параметры')),
            ],
            options={
                'verbose_name': 'Назначение',
                'verbose_name_plural': 'Назначения',
            },
        ),
        migrations.CreateModel(
            name='Cabinet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(null=True, verbose_name='Номер кабинета')),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Кабинет',
                'verbose_name_plural': 'Кабинеты',
            },
        ),
        migrations.CreateModel(
            name='Cell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, verbose_name='Дата приема')),
                ('time_start', models.TimeField(verbose_name='Время приема')),
                ('time_end', models.TimeField(verbose_name='Окончание приема')),
                ('free', models.BooleanField(default=True, verbose_name='Свободна')),
                ('cabinet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Cabinet', verbose_name='Кабинет')),
            ],
            options={
                'verbose_name': 'Ячейка',
                'verbose_name_plural': 'Ячейки',
                'permissions': (('view_timetable', 'Разрешение на просмотр расписания'),),
            },
        ),
        migrations.CreateModel(
            name='Clinic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Наименование мед. учреждения')),
                ('city', models.CharField(max_length=128, verbose_name='Город')),
                ('address', models.CharField(max_length=256, verbose_name='Адрес')),
                ('index_address', models.CharField(max_length=31, verbose_name='Индекс')),
                ('email', models.EmailField(max_length=254, verbose_name='Электронная почта')),
                ('picture', models.ImageField(null=True, upload_to='', verbose_name='Фотография')),
            ],
            options={
                'verbose_name': 'Мед. уреждение',
                'verbose_name_plural': 'Мед. учреждения',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='Системная дата удаления')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('name', models.CharField(max_length=127, verbose_name='Название подразделения')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес подразделения')),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Clinic', verbose_name='Мед. учреждение')),
                ('parent_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Department')),
            ],
            options={
                'verbose_name': 'Подразделение',
                'verbose_name_plural': 'Подразделения',
            },
        ),
        migrations.CreateModel(
            name='NumberOfServiceRestriction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Количество')),
                ('number_of_used', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Количество назначенныхх')),
                ('date_start', models.DateField(verbose_name='Начало действия ограничения')),
                ('date_end', models.DateField(verbose_name='Конец действия ограничения')),
            ],
            options={
                'verbose_name': 'Ограничение на кол-во услуг',
                'verbose_name_plural': 'Ограничения на кол-во услуг',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=128, verbose_name='Фамилия')),
                ('last_name', models.CharField(max_length=128, verbose_name='Имя')),
                ('middle_name', models.CharField(max_length=128, verbose_name='Отчество')),
                ('birth_date', models.DateField(validators=[main.validators.birth_date_validation], verbose_name='Дата рождения')),
                ('phone', models.CharField(blank=True, max_length=31, null=True, verbose_name='Телефон')),
                ('polis_number', models.CharField(max_length=16, null=True, verbose_name='Номер полиса')),
                ('polis_seria', models.CharField(blank=True, max_length=6, null=True, verbose_name='Серия полиса')),
                ('clinic_attached', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attached_patients', to='main.Clinic', verbose_name='Мед. учреждение прикреплкния')),
                ('clinics', models.ManyToManyField(related_name='patients', to='main.Clinic', verbose_name='Мед. учреждения')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Пациент',
                'verbose_name_plural': 'Пациенты',
            },
        ),
        migrations.CreateModel(
            name='ProfileSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Наименование настроек')),
            ],
            options={
                'verbose_name': 'Настройки профиля',
                'verbose_name_plural': 'Настройки профилей',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='Системная дата удаления')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('code', models.CharField(max_length=32, verbose_name='Код ОКМУ')),
                ('name', models.CharField(max_length=512, verbose_name='Название')),
                ('type', models.CharField(blank=True, max_length=128, null=True, verbose_name='Тип')),
                ('settings', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Настройки')),
                ('is_finished', models.BooleanField(default=1, verbose_name='Является услугой')),
                ('level', models.IntegerField(default=4, verbose_name='Уровень')),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Clinic', verbose_name='Мед. учреждение')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Service')),
            ],
            options={
                'ordering': ['code'],
                'verbose_name': 'Услугa',
                'verbose_name_plural': 'Услуги',
            },
        ),
        migrations.CreateModel(
            name='ServiceRestriction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_settings', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.ProfileSettings', verbose_name='Настройки профиля пользователя')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Service', verbose_name='Услуга')),
            ],
            options={
                'verbose_name': 'Разрешение назначить услугу',
                'verbose_name_plural': 'Разрешения на назначения услуг',
            },
        ),
        migrations.CreateModel(
            name='SiteConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_url', models.CharField(max_length=512, verbose_name='Страница аутентификации')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sites.Site')),
            ],
            options={
                'verbose_name': 'Настройки сайта',
                'verbose_name_plural': 'Настройки сайтов',
            },
        ),
        migrations.CreateModel(
            name='SiteServiceRestriction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('services', models.ManyToManyField(to='main.Service', verbose_name='Услуга')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sites.Site', verbose_name='Сайт')),
            ],
            options={
                'verbose_name': 'Разрашеение на назначение услуг на сайте',
                'verbose_name_plural': 'Разрешения на назначения услуг на сайтах',
            },
        ),
        migrations.CreateModel(
            name='SlotRestriction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_settings', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.ProfileSettings', verbose_name='Настройки профиля пользователя')),
            ],
            options={
                'verbose_name': 'Разрешение на тип ячейки',
                'verbose_name_plural': 'Разрешения на тип ячейки',
            },
        ),
        migrations.CreateModel(
            name='SlotType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Имя')),
                ('color', models.CharField(blank=True, help_text='HEX color, as #RRGGBB', max_length=7, null=True, verbose_name='Цвет')),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Clinic', verbose_name='Мед. учреждение')),
            ],
            options={
                'verbose_name': 'Тип слота',
                'verbose_name_plural': 'Типы слотов',
            },
        ),
        migrations.CreateModel(
            name='Specialist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_time', models.DateTimeField(blank=True, null=True, verbose_name='Системная дата удаления')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('fio', models.CharField(max_length=128, verbose_name='Полное имя')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Department', verbose_name='Подразделение')),
                ('performing_services', models.ManyToManyField(to='main.Service', verbose_name='Выполняемые услуги')),
            ],
            options={
                'verbose_name': 'Специалист',
                'verbose_name_plural': 'Специалисты',
            },
        ),
        migrations.CreateModel(
            name='SpecialistRestriction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_settings', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.ProfileSettings', verbose_name='Настройки профиля пользователя')),
                ('specialist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Specialist', verbose_name='Специалист')),
            ],
            options={
                'verbose_name': 'Разрешенный для назначения специалист',
                'verbose_name_plural': 'Разрешенные для назначений специалисты',
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True, unique=True, verbose_name='Специализация')),
            ],
            options={
                'verbose_name': 'Специализация',
                'verbose_name_plural': 'Специализации',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Имя профиля')),
                ('clinic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Clinic', verbose_name='Мед. учреждение')),
                ('profile_settings', models.ForeignKey(default=main.models.user_profile.get_default_profile_settings, on_delete=models.SET(main.models.user_profile.get_default_profile_settings), to='main.ProfileSettings', verbose_name='Настройки профиля')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.Site', verbose_name='Сайт')),
                ('user', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профиля пользователей',
            },
        ),
        migrations.AddField(
            model_name='specialist',
            name='specialization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Specialization', verbose_name='Специализация'),
        ),
        migrations.AddField(
            model_name='slotrestriction',
            name='slot_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.SlotType', verbose_name='Тип ячейки'),
        ),
        migrations.AddField(
            model_name='profilesettings',
            name='service_restrictions',
            field=models.ManyToManyField(through='main.ServiceRestriction', to='main.Service', verbose_name='Доступные для назначения услуги'),
        ),
        migrations.AddField(
            model_name='profilesettings',
            name='slot_restrictions',
            field=models.ManyToManyField(through='main.SlotRestriction', to='main.SlotType', verbose_name='Ограничения на тип ячейки'),
        ),
        migrations.AddField(
            model_name='profilesettings',
            name='specialist_restrictions',
            field=models.ManyToManyField(through='main.SpecialistRestriction', to='main.Specialist', verbose_name='Доступные для назначения специалисты'),
        ),
        migrations.AddField(
            model_name='numberofservicerestriction',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Service', verbose_name='Услуга'),
        ),
        migrations.AddField(
            model_name='numberofservicerestriction',
            name='user_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.UserProfile', verbose_name='Профиль пользователя'),
        ),
        migrations.AddField(
            model_name='cell',
            name='performing_services',
            field=models.ManyToManyField(blank=True, to='main.Service', verbose_name='Выполняемые услуги'),
        ),
        migrations.AddField(
            model_name='cell',
            name='slot_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.SlotType', verbose_name='Тип слота'),
        ),
        migrations.AddField(
            model_name='cell',
            name='specialist',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Specialist', verbose_name='Специалист'),
        ),
        migrations.AddField(
            model_name='cabinet',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Department', verbose_name='Подразделение'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='cell',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Cell', verbose_name='Ячейка'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Patient', verbose_name='Пациент'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Service', verbose_name='Услуга'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='specialist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Specialist', verbose_name='Специалист'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='user_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.UserProfile', verbose_name='Профиль пользователя'),
        ),
        migrations.AlterUniqueTogether(
            name='specialistrestriction',
            unique_together=set([('profile_settings', 'specialist')]),
        ),
        migrations.AlterUniqueTogether(
            name='slottype',
            unique_together=set([('name', 'clinic')]),
        ),
        migrations.AlterUniqueTogether(
            name='servicerestriction',
            unique_together=set([('profile_settings', 'service')]),
        ),
    ]
